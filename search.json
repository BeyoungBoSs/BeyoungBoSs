[{"title":"CTF 资源","url":"/2019/08/24/CTF资源/","content":"\n\n## 书籍推荐\n\n### LINUX\n\n- 《linux鸟哥的私房菜》\n\n### WEB\n\n- 《计算机网络（第七版）》\n- 《白帽子讲WEB安全》\n- 《XSS跨站脚本攻击剖析与防御》\n- 《SQL注入攻击与防御（第二版）》\n- 《Web前端黑客技术揭秘》\n\n### 逆向\n\n- 《汇编语言》（王爽著）\n- 《有趣的二进制》\n- 《使用OD从零开始cracking》\n- 《IDA Pro权威指南》\n- 《逆向工程核心原理》\n- 《逆向工程权威指南》\n- 《加密与解密（第三版）》\n- 《Android软件安全与逆向分析》\n\n### PWN\n\n- 《0day安全2》\n- 《漏洞战争》\n- 《程序员的自我修养》\n- 《深入理解计算机系统（第三版）》\n- 《Windows内核安全与驱动开发》\n- 《竹林蹊径——深入浅出Windows驱动开发》\n\n### 综合\n\n- 《CTF All in One》\n\n## 训练平台\n\n- 实验吧\n- Bugku\n- ADWorld（攻防世界）\n- 南邮平台\n- Jarvis OJ（浙大平台）\n- X计划平台（安恒月赛）\n\n论坛或平台：\n\n- 看雪安全\n- 吾爱破解\n- Bugku\n- XCTF联赛平台\n- CTFTime\n- Github\n\n## 大佬的文章\n\n[Bugku论坛教程/书籍分享](https://www.bugku.com/forum-50-1.html)\n[Web安全学习路线 -- Xiaoxi](http://momomoxiaoxi.com/2016/10/22/Websecurity/)\n[给表弟的Web安全入门建议 -- sosly](https://sosly.me/index.php/2017/07/17/studywebsec/)\n[安全电子书籍 -- 红日攻防实验室](http://sec-redclub.com/604.html)\n[ctf re/pwn入门书单 -- Sakura](http://eternalsakura13.com/2018/05/31/shudan/)\n[CTF相关书籍以及个人简评 -- 澪同学](https://zhuanlan.zhihu.com/p/29283514)\n[CTF入门指南 -- Murrey_Xiao](https://www.jianshu.com/p/dbf1ae90e591)\n[CTF入门书籍 -- 折柳不折](https://asuna.wang/2018/09/27/SixthBlog/)\n[CTF入门指南(0基础) -- Angel_Kitty](https://www.cnblogs.com/ECJTUACM-873284962/p/6691817.html)\n"},{"title":"Python","url":"/2019/07/09/Python - 副本/","content":"\n# **python学习随手记**\n> 都是一些基础，用来写博客了练练手\n# 基础\n## 变量的命名和使用\n1. 变量名只含   字母、数字、下划线   不能有空格\n2. 慎用小写字母‘i’和大写字母‘O'\n## 字符串\n1. 引号成对出现\n\n2. `print('hello \"world\"')`\n\n3. `print('''hello \"world\"''')`\n\n4. \n```\ndef good()\n\t\"\"\"  文档字符串  \"\"\"   #用三引号括起，生成有关函数中程序文档，调试开发有用\n\tprint(hello)\n```\n\n5. \n### 一些方法\n1. `.title()`：首字母大写\n2. `.upper()`全大写\n3. `.lower()`全小写\n4. `.rstrip()`删除字符串末尾的空白（删除后保存在临时变量里，想改变原变量就要重新赋值回去）\n5. `.lstrip()`删除字符串首段的空白\n6. `.strip()`删除字符串两边的空白\n\n## Python版本print\n\n1. python2.x print中无需将要打印的内容放括号里\n```\na=1\nb=2\nprint \"the sum=\",a+b,#末尾添加逗号不换行\n```\n2. python3.x print是一个函数\n```\na=1\nb=2\nprint(\"the sum=\",a+b,end=\"\")#end参数默认为\\n\n>3\nprint(\"the sum=\",a+b,end=\"asd\")\n>3asd\n```\n\n### Python版本整除\n1. python2.x \n```a=1\nprint 3/2\n>1\nprint 3/2.0\n>1.5\n```\n2. python3.x \n```\nprint(3/2)\n>1.5\nprint(3//2)\n>1\nprint(3//2.0)\n>1.0\n```\n\n## 负数向下取整\npython除法采取的是向下取整，即向负无穷方向取最接近精确值的整数。\n\n1. 故当整除运算有负数(python3)\n\n```\n\tprint(-3//2)\n\t>-2\n\tprint(int(-3//2))\n\t>-2\n\t> print(int(-3/2))\n\t>-1\n```\n\n\n2. 取余运算\n\n```\n    print(-5%4)\n    >3\n    # -5 // 4 = -2 , -5 - (-2) * 4 = 3\n    # -5 - 3 % 4 = 0\n```\n\n   \n\n## python之禅\n\n> python的原则\n\n![1562474065717](https://github.com/BeyoungBoSs/images/raw/master/img/1562474065717.png)\n\n# 列表\n\n## 列表的访问\n\n列表:  [  ]\n\n```\nt=[ ('a',1) , ('b',2,3) , 4 ]\nprint(t[0])    #索引从0开始，末尾为-1\n>('a',1)\nprint(t[-1])\n>4\nprint(t[1][2])\n>3\n```\n\n### 一些方法\n\n1. `.append('123')`将元素 '123' 放入列表末尾\n2. `.insert(0.'123')`将元素 '123' 放入索引 0 处,其他元素右移\n3. `del t[0]`永久删除索引为 0 处的元素\n4. `pop(0)`临时删除（列表里不存在，在临时变量里）索引 0 处的元素，默认索引-1\n5. `remove('123')`临时根据值删除元素，只删除顺序第一个，无法多个\n6. `sort()`永久性排序，参数reverse=True为倒序，默认reverse=False正序`car.sort(reverse=False)#方法`\n7. `sorted()`临时性排序`sorted(t)#函数`\n8. `reverse()`反转列表\n9. `len()`表长\n\n## 数字列表\n\n### range\n\n`range( 1 , 5 , 2 )`范围左闭右开 [ 1 , 5 ) 步长为 2（默认为1）\n\n### 简单统计\n\n```\nt=[1,2,3]\nprint(min(t))\n>1\nprint(max(t))\n>3\nprint(sum(t))\n>6\n```\n\n### 列表解析\n\n#### 过滤函数Filter函数\n\n```\n t=[1,2,3,4,5,6]\n filter(lambda x:x%2,t) \n >[1, 3, 5]\n print(filter(lambda x:x%2==1,t))\n >[1, 3, 5]\n```\n#### Lambda函数\n\n1. lambda允许用户快速定义单行函数，当然用户也可以按照典型的函数定义完成函数。\n\n2. lambda定义的是单行函数，如果需要复杂的函数，应该定义普通函数\n3. lambda参数列表可以包含多个参数，如lambda x,y:x+y\n4. lambda中的表达式不能含有命令，而且只限一条表达式\n\n```\nlst=['Welcome', 'to', 'Python']\nf=lambda x:x[-1]\ng=lambda x:len(x)\nprint(f(lst))\n>Python\nprint(g(lst)) \n>3\n```\n#### 序列映射函数Map函数\nMap主要用来对多个序列进行映射处理并返回一个处理后的对应序列。\n```\nm=[1,2,3,4,5,6]\nmap(lambda x:x**2,m)\n>[1, 4, 9, 16, 25, 36]\n```\n列表解析几种呈现\n```\n#找出1~9的三次方中的偶数项\n#方法1：列表解析+if判断\n\nt=[x**3 for x in range(1,10) if x%2==0]\nprint(t)\n>[8, 64, 216, 512]\n\n#方法2：列表解析+filter+lambda函数\n\nt=list(filter((lambda x:x%2==0),[x**3 for x in range(1,10)]))\nprint(t)  \n>[8, 64, 216, 512]\n\n#方法3：map+filter+lambda函数（列表解析类似于map函数，但列表解析比map函数运行要快一点，map函数对for循环要快2倍）\n\nt=list(filter(lambda x:x%2==0,map((lambda x:x**3),range(1,10))))\nprint(t)  \n>[8, 64, 216, 512]\n```\n### 切片\n\n[ m : n ]\n\n从索引m开始，到n-1结束（默认为表头：表尾）共 m-n 个元素\n\n#### 复制列表\n\n   [ : ]   #列表之间不能简单赋值，要用复制\n\n## 元组\n\n元组：()\n\n不能修改元组的元素，但可以给整个元组赋值(覆盖)\n\n# if语句\n\n## 检测多个条件\n\n- and\n\n- or\n\n- in #检查是否在其中\n\n- if-else\n```\n  if A:\n  else:\n```\n- if-elif-else\n```\n  if A:\n  elif B:\n  else:\n```\n\n# 字典\n\n字典：{  }         一系列的键值对\n\n1. 添加键值对\n```\nt={}\nt['new']=1\nprint(t)\n>{'new': 1}\n```\n\n2. `del t['new']`删除键值对\n\n3. `.items()`所有键值对\n\n4. `.keys()`所以键\n\n5. `.values()`所有值\n\n# 输入\npython2\n\n- raw_input()\n\npython3\n\n- input()\n\n# 函数\n\n## 传递实参\n\n### 位置实参\n\n```\ndef good(m,n):\n    print(m+' '+n)\n\ngood('good','day')    #m对应'good'，n对应'day'\n>good day\n```\n\n按顺序一一对应\n\n### 关键字实参\n\n```\ndef good(m,n):\n    print(m+' '+n)\n\ngood(m='good',n='day')    #m对应'good'，n对应'day'\n>good day\n```\n### 默认值\n\n```\ndef good(m,n='day'):\n    print(m+' '+n)\n\ngood('good')    #m对应'good'，n提供默认值'day'\n>good day\n```\n这样可以使实参变成可选项，但必须注意将默认值放最后（不然会覆盖）\n\n### 禁止函数修改列表\n\n利用切片 [ : ] 制作副本\n\n### 传递任意数量的实参\n\n*m中星号创建了一个名为m的空元组\n\n```\ndef good(*m):\n    print(m)\n\ngood('good','day','is','nice')   \n>gooddayisnice\n```\n**m创建空字典\n\n# 类\n\n类提供了一种组合数据和功能的方法。\n\n创建一个新类意味着创建一个新类型 的对象，从而允许创建一个该类型的新实例。\n\n每个类的实例可以拥有保存自己状态的属性。一个类的实例也可以有改变自己状态的（定义在类中的）方法。\n\n## Python 作用域和命名空间\n\n*namespace* （命名空间）是一个从名字到对象的映射。 大部分命名空间当前都由 Python 字典实现，但一般情况下基本不会去关注它们（除了要面对性能问题时），而且也有可能在将来更改。\n\n命名空间的例子 ：\n\n1. 存放内置函数的集合（包含 [`abs()`](https://docs.python.org/zh-cn/3/library/functions.html#abs) 这样的函数，和内建的异常等）；\n2. 模块中的全局名称；\n3. 函数调用中的局部名称。 \n\n从某种意义上说，对象的属性集合也是一种命名空间的形式。 关于命名空间的重要一点是，不同命名空间中的名称之间绝对没有关系；例如，两个不同的模块都可以定义一个 `manlen` 函数而不会产生混淆（模块的用户必须在其前面加上模块名称）\n\n *属性* --- 例如，在表达式 `z.real` 中，`real` 是对象 `z` 的一个属性。按严格的说法，对模块中名称的引用属于属性引用：在表达式 `modname.funcname` 中，`modname` 是一个模块对象而 `funcname` 是它的一个属性。在此情况下在模块的属性和模块中定义的全局名称之间正好存在一个直观的映射：它们共享相同的命名空间\n\n属性可以是只读或者可写的。如果为后者，那么对属性的赋值是可行的。模块属性是可以写，你可以写出 `modname.the_answer = 42` 。可写的属性同样可以用 [`del`](https://docs.python.org/zh-cn/3/reference/simple_stmts.html#del) 语句删除。例如， `del modname.the_answer` 将会从名为 `modname` 的对象中移除 `the_answer` 属性。\n\n在不同时刻创建的命名空间拥有不同的生存期。包含内置名称的命名空间是在 Python 解释器启动时创建的，永远不会被删除。模块的全局命名空间在模块定义被读入时创建；通常，模块命名空间也会持续到解释器退出。被解释器的顶层调用执行的语句，从一个脚本文件读取或交互式地读取，被认为是 [`__main__`](https://docs.python.org/zh-cn/3/library/__main__.html#module-__main__) 模块调用的一部分，因此它们拥有自己的全局命名空间。（内置名称实际上也存在于一个模块中；这个模块称作 [`builtins`](https://docs.python.org/zh-cn/3/library/builtins.html#module-builtins) 。）\n\n一个函数的本地命名空间在这个函数被调用时创建，并在函数返回或抛出一个不在函数内部处理的错误时被删除。每次递归调用都会有它自己的本地命名空间。\n\n一个 **作用域**是一个命名空间可直接访问的 Python 程序的文本区域。 这里的 “可直接访问” 意味着对名称的非限定引用会尝试在命名空间中查找名称。\n\nAlthough scopes are determined statically, they are used dynamically. At any time during execution, there are at least three nested scopes whose namespaces are directly accessible:\n\n- 最先搜索的最内部作用域包含局部名称\n- 从最近的封闭作用域开始搜索的任何封闭函数的范围包含非局部名称，也包括非全局名称\n- 倒数第二个作用域包含当前模块的全局名称\n- 最外面的范围（最后搜索）是包含内置名称的命名空间\n\n如果一个名称被声明为全局变量，则所有引用和赋值将直接指向包含该模块的全局名称的中间作用域。 要重新绑定在最内层作用域以外找到的变量，可以使用 [`nonlocal`](https://docs.python.org/zh-cn/3/reference/simple_stmts.html#nonlocal) 语句声明为非本地变量。 如果没有被声明为非本地变量，这些变量将是只读的（尝试写入这样的变量只会在最内层作用域中创建一个 *新的* 局部变量，而同名的外部变量保持不变）。\n\n通常，当前局部作用域将引用当前函数的局部名称。 在函数以外，局部作用域将引用与全局作用域相一致的命名空间：模块的命名空间。 类定义将在局部命名空间内再放置另一个命名空间。\n\nPython 的一个特殊之处在于 -- 如果不存在生效的 [`global`](https://docs.python.org/zh-cn/3/reference/simple_stmts.html#global) 语句 -- 对名称的赋值总是进入最内层作用域。 赋值不会复制数据 --- 它们只是将名称绑定到对象。 删除也是如此：语句 `del x` 会从局部命名空间的引用中移除对 `x` 的绑定。 事实上，所有引入新名称的操作都使用局部作用域：特别地，[`import`](https://docs.python.org/zh-cn/3/reference/simple_stmts.html#import) 语句和函数定义会在局部作用域中绑定模块或函数名称。\n\n[`global`](https://docs.python.org/zh-cn/3/reference/simple_stmts.html#global) 语句可被用来表明特定变量生存于全局作用域并且应当在其中被重新绑定；[`nonlocal`](https://docs.python.org/zh-cn/3/reference/simple_stmts.html#nonlocal) 语句表明特定变量生存于外层作用域中并且应当在其中被重新绑定。\n\n## 创建类\n\n```\nclass Car():#首字母名称大写的一般是类\n    \"\"\" 一次模拟小车\"\"\"\n\n    def __init__(self, name, gas):#一个特殊的方法，其中他的形参self必不可少用于自动传递实参给每个与类相关联的方法\n        \"\"\"初始化属性name和gas\"\"\"\n        self.name=name\n        self.gas=gas\n        \n    def sell(self):\n        print(\"卖出了\"+self.name)\n        \n    def gasis(self):\n        print(\"剩余汽油\"+self.gas)\n```\n\npython2 中创建类\n\n`class Car(object):`\n\n### 访问属性\n\n```\ncalss Car():\n\t--snip--\n\t\nmy_car=Car('auto','500')\nprint(my_car.name)\n```\n\n### 调用方法\n\n```\ncalss Car():\n\t--snip--\n\t\nmy_car=Car('auto','500')\nprint(my_car.sell())\n```\n\n### 给属性指定默认值\n\n```\nclass Car():\n    \"\"\" 一次模拟小车\"\"\"\n\n    def __init__(self, name, gas):\n        self.name=name\n        self.gas='500'#设默认值500\n```\n\n### 修改属性的值\n\n#### 直接修改\n\n```\ncalss Car():\n\t--snip--\n\t\nmy_car=Car('auto','500')\nmy_car.name='bmw'\n```\n\n#### 通过方法修改\n\n```\nclass Car():#首字母名称大写的一般是类\n    \"\"\" 一次模拟小车\"\"\"\n\n    def __init__(self, name, gas):\n        self.name=name\n        self.gas=gas\n        \n    def less(self,gasnow)\n    \tself.gas=gasnow\n    \t\nmy_car=Car('auto','500')\nmy_car.less('400')\nprint(my_car.gas)\n>400\n```\n\n## 继承\n\n```\nclass Car():\n    \"\"\" 一次模拟小车\"\"\"\n\n    def __init__(self, name, gas):\n        self.name = name\n        self.gas = gas\n\n    def sell(self):\n        print(\"卖出了\" + self.name)\n\n    def gasis(self):\n        print(\"剩余汽油\" + self.gas)\n\n\nclass Electricalcar(Car):\n    \"\"\"电动汽车\"\"\"\n    \n    def __init__(self,name,gas):#初始化父类属性\n        super.__init__(name,gas)\n\n```\n\n**创建子类时，父类必须在当前文件且在子类前**\n\npython2 中\n\n```\nclass Car(object):\n    \"\"\" 一次模拟小车\"\"\"\n\n    def __init__(self, name, gas):\n        self.name = name\n        self.gas = gas\n\nclass Electricalcar(Car):\n    \"\"\"电动汽车\"\"\"\n    \n    def __init__(self,name,gas):#初始化父类属性\n        super(Electricalcar,self).__init__(name,gas)\n\n```\n\n### 重写父类的方法\n\n```\nclass Car():\n    \"\"\" 一次模拟小车\"\"\"\n\n    def __init__(self, name, gas):\n        self.name = name\n        self.gas = gas\n\n    def sell(self):\n        print(\"卖出了\" + self.name)\n\n    def gasis(self):\n        print(\"剩余汽油\" + self.gas)\n\n\nclass Electricalcar(Car):\n    \"\"\"电动汽车\"\"\"\n    \n    def __init__(self,name,gas):\n        super.__init__(name,gas)\n        self.ele='enough'#为子类添加属性\n    \n    def gasis(self):#覆盖了父类的gasis\n    \tprint(\"no gas\")\n```\n\n### 将实例用作属性\n\n```\ncalss Battery():\n\t\"\"\"用于模拟电池的相关属性\"\"\"\n\t---snip---\n\nclass Electricalcar(Car):\n    \"\"\"电动汽车\"\"\"\n    \n    def __init__(self,name,gas):\n        super.__init__(name,gas)\n        self.battery=Battery()\n\n```\n\n## 导入类\n\n类似于函数\n\n`from car.py import Car `\n\n# 文件和异常\n\n## 文件\n\n### open函数的用法\n\n```\nname = open(r'errname.txt','w')\t#加'r'可以使文件路径的转义字符失效(即原始字符)\ndata = name.readline()\nname.close()\t#有开有关\n```\nPython引入了with语句来自动帮我们调用close()方法:\n```\nwith open('/path/to/file', 'r') as filename:\t#Windows系统文件路径为反斜杠'\\'\n\t\t---snip---\n```\n\n1. w：以写方式打开\n\n2. a：以追加方式打开\n\n3. r+：以读写模式打开\n\n4. w+：以读写模式打开\n\n5. rb：以二进制读模式打开\n\n6. wb：以二进制写模式打开\n\n7. ab：以二进制追加模式打开\n\n8. rb+：以二进制读写模式打开\n\n9. wb+：以二进制读写模式打开\n\n10. ab+：以二进制追加模式打开\n\n### readline和readlines的用法和区别\n\n```\n name = open('test.txt','r')\n username = name.readline()\n print(username)\n>'devilf\\n'\n username = name.readlines()\n print(username)\n>['gy\\n', 'tom\\n', 'lisa\\n', 'lebron\\n', 'kobe']\n```\n\n### 写入文件\n\n```\nwith open(r'path/filename','w') as file_1:\n\tfile_1.write(\"something\")\n```\n### 分析文本\n\n使用.split()来分割字符\n\n```\na=\"132.456.789\"\nprint(a.split(' '))\n>['132.456.789']\n\n\na=\"132.456.789\"\nprint(a.split('.'))\n>['132', '456', '789']\n```\n\n\n\n## 异常\n\n使用try-except代码块可以在出现异常时执行指定代码，否则程序报错终止并显示traceback\n\n### try-except代码块\n\n```\nprint(5/0)\n\nTraceback (most recent call last):\n  File \"C:/Users/Administrator/PycharmProjects/untitled/145.py\", line 1, in <module>\n    print(5/0)\nZeroDivisionError: division by zero\t\t#ZeroDivisionError是一个异常对象\n```\n更改为：\n```\ntry:\n    print(5/0)\nexcept ZeroDivisionError:\n    print(\"you can't divide by zero\")\n>you can't divide by zero\n```\n\n使用else：\n\n```\ntry:\n    print(5/1)\nexcept ZeroDivisionError:\n    print(\"you can't divide by zero\")\nelse:\n\tprint(\"you are right\")\n>you are right\n```\n跳过错误：\n\n```\ntry:\n    print(5/0)\nexcept ZeroDivisionError:\n    pass\n\n\nTraceback (most recent call last):\n  File \"C:/Users/Administrator/PycharmProjects/untitled/145.py\", line 1, in <module>\n    print(5/0)\nZeroDivisionError: division by zero\n```\n### 使用json模块存储信息防止出现异常时丢失\n\n```\nimport json\nfilename = 'username.json'\t\t\t#后缀为.json说明类型\ntry:\n    with open(filename) as f:\n        username = json.load(f)\t\t#将f读入到username对象\n        \nexcept FileNotFoundError:\t\t\t#没找到以前的文件就重新输入\n    username = input(\"your name\")\n    with open(filename,'w') as f:\n        json.dump(username,f)\t\t#将username保存到f中\n        print(\"welcome\"+username)\n\nelse:\n    print(\"welcome back\")\t\t\t#存在以前意外退出时保存的文件\n```\n\n这样可以防止上次意外退出后信息丢失\n\n# 重构\n\n将代码划分为一系列完成具体工作的函数，这样的过程被称为重构。\n\n重构让代码更清晰、更易于理解、更容易扩展。"},{"title":"环境搭建","url":"/2019/07/03/ctf_day1/","content":"\n# RE：从零开始的github+hexo博客搭建\n\n## 安装[**node.js**](https://nodejs.org/en/)\n\nNodejs标准的web开发框架Express，可以帮助我们迅速建立web站点，而且学习曲线更低。非常适合小型网站，个性化网站\n\n1. [打开链接](https://nodejs.org/en)\n2. ![1562120225824](https://raw.githubusercontent.com/BeyoungBoSs/images/master/img/1562120225824.png)\n3. 左边绿色按钮为下载通用版，右边是最新版\n\n\n\n## 安装[**git**](https://git-scm.com/)\n是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理 \n\n1. [打开链接](https://git-scm.com/)\n2. ![1562120405797](https://raw.githubusercontent.com/BeyoungBoSs/images/master/img/1562120405797.png)\n\n​       点击Downloads\n\n3. ![1562120555460](https://github.com/BeyoungBoSs/images/raw/master/img/1562120555460.png)\n\n​        选择系统类型\n\n4. （我以Windows 64位为例）\n\n![1562120668580](https://github.com/BeyoungBoSs/images/raw/master/img/1562120668580.png)\n\n下载安装包\n\n5. 安装过程除了选择安装路径，其他一直next就可以了\n\n## 配置环境变量\n\n1. 找到node安装路径![1562120964962](https://github.com/BeyoungBoSs/images/raw/master/img/1562120964962.png)\n2. 忘记了的话可以使用搜索![1562121087745](https://github.com/BeyoungBoSs/images/raw/master/img/1562121087745.png)\n3. [打开环境变量](https://jingyan.baidu.com/article/a17d5285c9b0c48099c8f26a.html)\n\n在path中![1562121342785](https://github.com/BeyoungBoSs/images/raw/master/img/1562121342785.png)\n\n添加你的安装路径\n\n4. 验证一下配置是否成功\n\ncmd中输入node后再输入var n=10测试下\n\n![1562121557375](https://github.com/BeyoungBoSs/images/raw/master/img/1562121557375.png)\n\n\n\n## 安装hexo\n\n\n\n1. 进入NodeJS的安装目录 \n2. 在空白处右键，因为安装了git的原因，会有\n\n![1562129164440](https://github.com/BeyoungBoSs/images/raw/master/img/1562129164440.png)\n\n3. 点击后进入\n\n![1562129335229](https://github.com/BeyoungBoSs/images/raw/master/img/1562129335229.png)\n\n输入：\n\n`npm install -g hexo`\n\n此处安装很玄学，有可能报错，有可能半天无反应\n\n常见错误即解决：1.权限不够：换成`sudo npm install -g hexo`\n\n​                               2.下载地址问题：[npm install 无响应解决方案,从此不用在等了](https://blog.csdn.net/fanhu6816/article/details/53812724)\n\n​                               3.[其他](http://www.baidu.com/)请自行\n\n4. 等待片刻\n5. 为你的博客创建一个本地文件夹\n\n```\nmkdir blog && cd D:blog\n```\n\n此处D:blog便是你的博客目录，自定义路径，最好将此目录备份，以防文件夹丢失后博客就没有了 \n\n6. 依次执行\n\n```\n hexo init\n npm install\n```\n7. 可以看本地效果并确定你是否完成了\n\n```\nhexo g\nhexo s\n```\n访问访问 http://localhost:4000 即可看到本地博客\n\n## 注册github\n\n1. 访问[https://github.com](https://github.com/) \n\n创建一个账号，完成后点击写着“sign up for GitHub”的绿色按钮 ，github会发邮件让你通过邮箱验证\n\n2. 新建仓库\n\n![1562130727170](https://github.com/BeyoungBoSs/images/raw/master/img/1562130727170.png)\n\n3. **很重要**    Github Pages的Repository名字是特定的，比如我Github账号是BeyoungBoSs，那么我Github Pages Repository名字就是BeyoungBoSs.github.io （按格式填入）\n\n   ![1562130796675](https://github.com/BeyoungBoSs/images/raw/master/img/1562130796675.png)\n   \n   \n\n4. 点击![1562130908530](https://github.com/BeyoungBoSs/images/raw/master/img/1562130908530.png)\n\n进入你刚建的仓库\n\n![1562130967603](https://github.com/BeyoungBoSs/images/raw/master/img/1562130967603.png)\n\n5. 进入设置\n\n![1562131027099](https://github.com/BeyoungBoSs/images/raw/master/img/1562131027099.png)\n\n6. 选择主题\n\n![1562131106386](https://github.com/BeyoungBoSs/images/raw/master/img/1562131106386.png)\n\n7. 完成了\n浏览器地址栏输入”你github的用户名.github.io”就可以看到初始的界面\n\n## 上传本地的仓库\n1. 打开刚刚新建的blog文件夹（我的是'D:\\blog'）\n\n2. 打开\n\n   ![1562131487342](https://github.com/BeyoungBoSs/images/raw/master/img/1562131487342.png)\n\n[最好不用记事本打开，记事本打开记得另存为utf-8格式](https://www.jianshu.com/p/b26b9b520c71)\n3. ![1562131447258](https://github.com/BeyoungBoSs/images/raw/master/img/1562131447258.png)\n\n要和图片中一模一样，其中’BeyoungBoSs‘改为你的github名字，**注意：每个‘：’后都有一个空格**\n4. 右键打开git bash\n    输入\n\n  ```\n  npm install hexo-deployer-git --save （这命令是为了解决hexo新版本的部署问题）  \n  hexo g 回车 （这是重新生成blog） \n  hexo d 回车 （这是将本地blog部署到github的仓库）```\n  ```\n可能会出各种问题，需要积极百度\n\n至此教程完成\n\n还有更换主题，和博文的[markdown语法](https://blog.csdn.net/csdnzcj/article/details/60876438)"},{"title":"BETA2","url":"/2019/07/02/beat2/","content":"## BETA 第二阶段：进行了优化，丰富了界面\n\n\n\n\n"},{"title":"BETA1","url":"/2019/06/25/beta1/","content":"# 点击 [BeyoungBoSs](http://www.so.com/link?m=aYglVvHdUg8K8kDlNIWngzoApM8JhkrCv6l8NlDg3d%2FjI7WdrAmcMHkPOpUICQ5bQ5t1h1RClptE%3D)! 每天欢乐一下\n\n## 现在还是**BETA**阶段\n\n\n\n\n"}]